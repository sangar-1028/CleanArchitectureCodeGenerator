@page "/pages/{nameofPlural}"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Caching
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.DTOs
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.AddEdit

@inject IJSRuntime JS
@inject IStringLocalizer<{nameofPlural}> L
@attribute [Authorize(Policy = Permissions.{nameofPlural}.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

<ErrorBoundary>
    <ChildContent>
       <MudTable ServerData="@(new Func<TableState, Task<TableData<{itemname}Dto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  @bind-RowsPerPage="_defaultPageSize"
                  Height="calc(100vh - 330px)"
                  Loading="@_loading"
                  SortLabel="@ConstantString.ORDERBY"
                  MultiSelection="true"
                  @bind-SelectedItems="_selectedItems"
                  @bind-SelectedItem="_currentDto"
                  Hover="true" @ref="_table">
            <ToolBarContent>
                 <div class="d-flex align-start flex-grow-1">
                        <div class="d-flex gap-4">
                            <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                            <div class="d-flex flex-column">
                                <MudText Typo="Typo.caption">@Title</MudText>
                            <MudEnumSelect Style="min-width:120px" TEnum="{itemname}ListView" ValueChanged="OnChangedListView" Value="_query.ListView" Dense="true" Label="List View">
                                </MudEnumSelect>
                            </div>
                        </div>
                        <div class="flex-grow-1" />

                        <div class="d-flex flex-column justify-end">
                            <div class="d-flex">
                             <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudButton DisableElevation Variant="Variant.Outlined"
                                           Size="Size.Small"
                                           Disabled="@_loading"
                                           OnClick="@(()=>OnRefresh())"
                                           StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                           Style="margin-right: 4px; margin-bottom:4px">@ConstantString.REFRESH</MudButton>
                                @if (_canCreate)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           Disabled="@_loading"
                                           OnClick="OnCreate"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.CREATE</MudButton>
                                }
                                @if (_canDelete)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Disabled="@(!(_selectedItems.Count>0))"
                                           Size="Size.Small"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           OnClick="OnDeleteChecked"
                                           IconColor="Color.Surface">@ConstantString.DELETE</MudButton>
                                }
                                @if (_canExport)
                                {
                                    <MudLoadingButton @bind-Loading="_exporting" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                                  Label="@ConstantString.EXPORT"
                                                  Disabled="@_loading"
                                                  StartIcon="@Icons.Custom.FileFormats.FileExcel"
                                                  Size="Size.Small"
                                                  Style="margin-right: 4px; margin-bottom:4px"
                                                  OnClick="OnExport"
                                                  IconColor="Color.Surface">
                                    @ConstantString.EXPORT
                                    </MudLoadingButton>
                                }
                                @if (_canImport)
                                {
                                    <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx" Style="margin-top:0px" >
                                        <ButtonTemplate>
                                            <MudButton HtmlTag="label"
                                                   Size="Size.Small"
                                                   Variant="Variant.Outlined"
                                                   Color="Color.Primary"
                                                   Disabled="@_loading"
                                                   StartIcon="@Icons.Material.Filled.Upload"
                                                       for="@context">
                                                @if (_uploading)
                                                {
                                                    <MudProgressCircular  Size="Size.Small" Indeterminate="true" />
                                                    @ConstantString.UPLOADING
                                                }
                                                else
                                                {
                                                    @ConstantString.IMPORT
                                                }
                                            </MudButton>
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                }
                            </MudHidden>
                             <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                                @if (_canCreate)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           Disabled="@_loading"
                                           OnClick="OnCreate"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.CREATE</MudButton>
                                }
                                @if (_canDelete)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Disabled="@(!(_selectedItems.Count>0))"
                                           Size="Size.Small"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           OnClick="OnDeleteChecked"
                                           IconColor="Color.Surface">@ConstantString.DELETE</MudButton>
                                }
                            </MudHidden>
                            </div>
                            @if (_canSearch)
                            {
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@_query.Keyword" Placeholder="@ConstantString.SEARCH" Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                            }
                    
                        </div>
                    </div>
            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <col style="width:50px;" />
                    <col style="width:120px;" />
                    <col />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh>@ConstantString.ACTIONS</MudTh>
                @*TODO: Define the fields that should be displayed in data table*@
                {mudTdHeaderDefinition}
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ConstantString.ACTIONS">
                    @if (_canEdit || _canDelete)
                    {
                        <MudMenu Label="@ConstantString.ACTIONS" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true" AnchorOrigin="Origin.CenterLeft"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@ConstantString.EDIT</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="@(()=>OnDelete(context))">@ConstantString.DELETE</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @ConstantString.NOALLOWED
                        </MudButton>
                    }
                </MudTd>
                @*TODO: Define the fields that should be displayed in data table*@
                {mudTdDefinition}
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@ConstantString.NOMACHING</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.LOADING</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>


@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<{itemname}Dto> _selectedItems = new HashSet<{itemname}Dto>();
    private MudTable<{itemname}Dto> _table = default!;
    private {itemname}Dto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    [Inject]
    private IMediator _mediator { get; set; } = default!;
    [Inject]
    private IMapper _mapper { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;

    private {nameofPlural}WithPaginationQuery _query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService _blazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await _authState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Search)).Succeeded;
        _canEdit   = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.{nameofPlural}.Export)).Succeeded;
    }
    private async Task<TableData<{itemname}Dto>> ServerReload(TableState state)
    {
        try
        {
            _loading = true;
            _query.Sort = string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel;
            _query.SortBy = (state.SortDirection == SortDirection.Ascending ? AutoFilterer.Enums.Sorting.Ascending : AutoFilterer.Enums.Sorting.Descending);
            _query.Page = state.Page + 1;
            _query.PerPage = state.PageSize;
            var result = await _mediator.Send(_query).ConfigureAwait(false);
            return new TableData<{itemname}Dto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        _query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView({itemname}ListView listview)
    {
        _query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        {itemname}CacheKey.Refresh();
        _selectedItems = new();
        _query.Keyword  = string.Empty;
        await _table.ReloadServerData();
    }

    private async Task OnCreate()
    {
        var command = new AddEdit{itemname}Command();
        var parameters = new DialogParameters
            {
                { nameof(_{itemname}FormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}FormDialog>
        (L["Create a new item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnEdit({itemname}Dto dto)
    {
        var command = _mapper.Map<AddEdit{itemname}Command>(dto);
        var parameters = new DialogParameters
            {
                { nameof(_{itemname}FormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_{itemname}FormDialog>
        (L["Edit the item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnDelete({itemname}Dto dto)
    {
        var command = new Delete{itemname}Command(new int[] { dto.Id });
        var parameters = new DialogParameters 
           {
             { nameof(DeleteConfirmation.Command),  command },
             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DELETECONFIRMATION, dto.Name) }
           };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DELETECONFIRMATIONTITLE, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
             await _table.ReloadServerData();
        }
    }

    private async Task OnDeleteChecked()
    {
        var command = new Delete{itemname}Command(_selectedItems.Select(x => x.Id).ToArray());
        var parameters = new DialogParameters
                        {
                             { nameof(DeleteConfirmation.Command),  command },
                             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DELETECONFIRMWITHSELECTED,_selectedItems.Count) }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DELETECONFIRMATIONTITLE, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new Export{nameofPlural}Query()
            {
                Keyword = _query.Keyword,
                ListView = _query.ListView,
                Sort = string.IsNullOrEmpty(_table.TableContext.SortFieldLabel) ? "Id" : _table.TableContext.SortFieldLabel,
                SortBy = (_table.TableContext.SortDirection == SortDirection.Ascending ? AutoFilterer.Enums.Sorting.Ascending : AutoFilterer.Enums.Sorting.Descending)
            };
        var result = await _mediator.Send(request);
        if (result.Succeeded)
        {
            var downloadresult = await _blazorDownloadFileService.DownloadFile($"{L["{nameofPlural}"]}.xlsx", result.Data, contentType:"application/octet-stream");
            Snackbar.Add($"{ConstantString.EXPORTSUCESS}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        _exporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new Import{nameofPlural}Command(file.Name, stream.ToArray());
        var result = await _mediator.Send(command);
        if (result.Succeeded)
        {
            await _table.ReloadServerData();
            Snackbar.Add($"{ConstantString.IMPORTSUCCESS}", MudBlazor.Severity.Info);
        }
        else
        {
            foreach (var msg in result.Errors)
            {
                Snackbar.Add($"{msg}", MudBlazor.Severity.Error);
            }
        }
        _uploading = false;
    }

}