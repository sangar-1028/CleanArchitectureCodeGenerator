@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.AddEdit

@inherits MudComponentBase
@inject IStringLocalizer<{nameofPlural}> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="@L["{itemname} Name"]" @bind-Value="model.Name"
                                  For="@(() => model.Name)"
                                  Required="true"
                                  RequiredError="@L["{itemname} name is required!"]"
                                  >
                    </MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="@L["Description"]"
                                  Lines="3"
                                  For="@(() => model.Description)"
                                  @bind-Value="model.Description"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ButtonText.CANCEL</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">@ButtonText.OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEdit{itemname}CommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEdit{itemname}Command model { get; set; } = null!;

    async Task Submit()
    {
        if(_form is not null) {
            await _form.Validate();
            if (_form.IsValid)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
    }
    void Cancel() => MudDialog.Cancel();
}