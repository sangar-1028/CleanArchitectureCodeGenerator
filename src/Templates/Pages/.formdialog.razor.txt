@using CleanArchitecture.Blazor.Application.Features.{nameofPlural}.Commands.AddEdit

@inherits MudComponentBase
@inject IStringLocalizer<{nameofPlural}> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                {mudFormFieldDefinition}
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.CANCEL</MudButton>
        <MudButton Loading="@_saving" Color="MudBlazor.Color.Primary" OnClick="Submit">@ConstantString.SAVE</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    AddEdit{itemname}CommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEdit{itemname}Command model { get; set; } = null!;
    [Inject] private IMediator _mediator { get; set; } = default!;
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);

            if (!_form!.IsValid)
                return;

            var result = await _mediator.Send(model);

            if (result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SAVESUCCESS, MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }
        finally
        {
            _saving = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}