// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;

namespace {namespace};

    public class {nameofPlural}WithPaginationQuery : PaginationRequest, IRequest<PaginatedData<{itemname}Dto>>, ICacheable
    {
       public string CacheKey => {itemname}CacheKey.GetPagtionCacheKey($"{this}");
       public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
    }
    
    public class {nameofPlural}WithPaginationQueryHandler :
         IRequestHandler<{nameofPlural}WithPaginationQuery, PaginatedData<{itemname}Dto>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<{nameofPlural}WithPaginationQueryHandler> _localizer;

        public {nameofPlural}WithPaginationQueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IStringLocalizer<{nameofPlural}WithPaginationQueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _localizer = localizer;
        }

        public async Task<PaginatedData<{itemname}Dto>> Handle({nameofPlural}WithPaginationQuery request, CancellationToken cancellationToken)
        {
            //TODO:Implementing {nameofPlural}WithPaginationQueryHandler method 
           var filters = PredicateBuilder.FromFilter<{itemname}>(request.FilterRules);
           var data = await _context.{nameofPlural}.Where(filters)
                .OrderBy($"{request.Sort} {request.Order}")
                .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                .PaginatedDataAsync(request.Page, request.Rows);
            return data;
        }
   }