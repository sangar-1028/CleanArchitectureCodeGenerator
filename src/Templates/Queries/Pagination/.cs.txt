// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

public class {nameofPlural}WithPaginationQuery : PaginationFilter, ICacheableRequest<PaginatedData<{itemname}Dto>>
    {
        public string CacheKey => {itemname}CacheKey.GetPaginationCacheKey($"{this}");
        public MemoryCacheEntryOptions? Options => {itemname}CacheKey.MemoryCacheEntryOptions;
    }
    
public class {nameofPlural}WithPaginationQueryHandler :
         IRequestHandler<{nameofPlural}WithPaginationQuery, PaginatedData<{itemname}Dto>>
{
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<{nameofPlural}WithPaginationQueryHandler> _localizer;

        public {nameofPlural}WithPaginationQueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IStringLocalizer<{nameofPlural}WithPaginationQueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _localizer = localizer;
        }

        public async Task<PaginatedData<{itemname}Dto>> Handle({nameofPlural}WithPaginationQuery request, CancellationToken cancellationToken)
        {
            // TODO: Implement {nameofPlural}WithPaginationQueryHandler method 
           var data = await _context.{nameofPlural}.Specify(new {nameofPlural}PaginationSpecification(request))
                .OrderBy($"{request.OrderBy} {request.SortDirection}")
                .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                .PaginatedDataAsync(request.PageNumber, request.PageSize);
            return data;
        }
}

public class {nameofPlural}PaginationSpecification : Specification<{itemname}>
{
    public {nameofPlural}PaginationSpecification({nameofPlural}WithPaginationQuery query)
    {
        Criteria = q => q.Name != null;
        if (!string.IsNullOrEmpty(query.Keyword))
        {
            And(x => x.Name.Contains(query.Keyword));
        }
       
    }
}