using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using {rootnamespace}.Application.Common.Extensions;
using {rootnamespace}.Application.Common.Interfaces;
using {rootnamespace}.Domain.Entities;
using System.Linq.Dynamic.Core;
using MediatR;
using Microsoft.EntityFrameworkCore;
using AutoMapper.QueryableExtensions;
using Microsoft.Extensions.Localization;
using {rootnamespace}.Application.{itemname}s.DTOs;

namespace {namespace}
{
    public class GetAll{itemname}sQuery : IRequest<IEnumerable<{itemname}Dto>>
    {
       
    }
    
    public class GetAll{itemname}sQueryHandler :
         IRequestHandler<GetAll{itemname}sQuery, IEnumerable<{itemname}Dto>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<GetAll{itemname}sQueryHandler> _localizer;

        public GetAll{itemname}sQueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IStringLocalizer<GetAll{itemname}sQueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _localizer = localizer;
        }

        public Task<IEnumerable<{itemname}Dto>> Handle(GetAll{itemname}sQuery request, CancellationToken cancellationToken)
        {
            //TODO:Implementing GetAll{itemname}sQueryHandler method 
            throw new NotImplementedException();
        }
    }
}

