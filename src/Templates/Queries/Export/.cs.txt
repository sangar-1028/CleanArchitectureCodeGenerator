// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.


using {selectns}.{nameofPlural}.DTOs;

namespace {namespace};

public class Export{nameofPlural}Query : IRequest<byte[]>
    {
       public string OrderBy { get; set; } = "Id";
       public string SortDirection { get; set; } = "Desc";
       public string Keyword { get; set; } = String.Empty;
    }
    
public class Export{nameofPlural}QueryHandler :
         IRequestHandler<Export{nameofPlural}Query, byte[]>
{
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<Export{nameofPlural}QueryHandler> _localizer;
        private readonly {itemname}Dto _dto = new();
        public Export{nameofPlural}QueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IExcelService excelService,
            IStringLocalizer<Export{nameofPlural}QueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _excelService = excelService;
            _localizer = localizer;
        }

        public async Task<byte[]> Handle(Export{nameofPlural}Query request, CancellationToken cancellationToken)
        {
            // TODO: Implement Export{nameofPlural}QueryHandler method 
            var data = await _context.{nameofPlural}.Specify(new {nameofPlural}ExportSpecification(request))
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<{itemname}Dto, object?>>()
                {
                    // TODO: Define the fields that should be exported, for example:
                    {exportFuncExpression}
                }
                , _localizer["{nameofPlural}"]);
            return result;
        }
}


public class {nameofPlural}ExportSpecification : Specification<{itemname}>
{
    public {nameofPlural}ExportSpecification(Export{nameofPlural}Query request)
    {
        Criteria = q => q.Name != null;
        if (!string.IsNullOrEmpty(request.Keyword))
        {
            And(x => x.Name.Contains(request.Keyword));
        }
       
    }
}