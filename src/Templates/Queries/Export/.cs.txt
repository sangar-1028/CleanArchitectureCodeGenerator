// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.


using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Queries.Pagination;

namespace {namespace};

public class Export{nameofPlural}Query : BaseFilter, IRequest<Result<byte[]>>
{
      public string OrderBy { get; set; } = "Id";
      public string SortDirection { get; set; } = "Descending";
      public {itemname}ListView ListView { get; set; } = {itemname}ListView.All;
      public UserProfile? CurrentUser { get; set; }
      public {nameofPlural}ExportSpecification Specification => new {nameofPlural}ExportSpecification(this);
}
    
public class Export{nameofPlural}QueryHandler :
         IRequestHandler<Export{nameofPlural}Query, Result<byte[]>>
{
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<Export{nameofPlural}QueryHandler> _localizer;
        private readonly {itemname}Dto _dto = new();
        public Export{nameofPlural}QueryHandler(
            IApplicationDbContext context,
            IMapper mapper,
            IExcelService excelService,
            IStringLocalizer<Export{nameofPlural}QueryHandler> localizer
            )
        {
            _context = context;
            _mapper = mapper;
            _excelService = excelService;
            _localizer = localizer;
        }

        public async Task<Result<byte[]>> Handle(Export{nameofPlural}Query request, CancellationToken cancellationToken)
        {
            // TODO: Implement Export{nameofPlural}QueryHandler method 
            var data = await _context.{nameofPlural}.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<{itemname}Dto>(_mapper.ConfigurationProvider)
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<{itemname}Dto, object?>>()
                {
                    // TODO: Define the fields that should be exported, for example:
                    {exportFuncExpression}
                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);;
        }
}

public class {nameofPlural}ExportSpecification : Specification<{itemname}>
{
    public {nameofPlural}ExportSpecification(Export{nameofPlural}Query query)
    {
        var today = DateTime.Now.Date;
        var start = Convert.ToDateTime(today.ToString("yyyy-MM-dd", CultureInfo.CurrentCulture) + " 00:00:00",
            CultureInfo.CurrentCulture);
        var end = Convert.ToDateTime(today.ToString("yyyy-MM-dd", CultureInfo.CurrentCulture) + " 23:59:59",
            CultureInfo.CurrentCulture);
        var last30day = Convert.ToDateTime(
            today.AddDays(-30).ToString("yyyy-MM-dd", CultureInfo.CurrentCulture) + " 00:00:00",
            CultureInfo.CurrentCulture);

       Query.Where(q => q.Name != null)
             .Where(q => q.Name!.Contains(query.Keyword) || q.Description!.Contains(query.Keyword), !string.IsNullOrEmpty(query.Keyword))
             .Where(q => q.CreatedBy == query.CurrentUser.UserId, query.ListView == {itemname}ListView.My && query.CurrentUser is not null)
             .Where(q => q.Created >= start && q.Created <= end, query.ListView == {itemname}ListView.CreatedToday)
             .Where(q => q.Created >= last30day, query.ListView == {itemname}ListView.Created30Days);
       
    }
}
