// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

    public class Update{itemname}Command: IMapFrom<{itemname}Dto>,IRequest<Result>, ICacheInvalidator
    {
        {dtoFieldDefinition}
        public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
        public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.SharedExpiryTokenSource();
    }

    public class Update{itemname}CommandHandler : IRequestHandler<Update{itemname}Command, Result>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<Update{itemname}CommandHandler> _localizer;
        public Update{itemname}CommandHandler(
            IApplicationDbContext context,
            IStringLocalizer<Update{itemname}CommandHandler> localizer,
             IMapper mapper
            )
        {
            _context = context;
            _localizer = localizer;
            _mapper = mapper;
        }
        public async Task<Result> Handle(Update{itemname}Command request, CancellationToken cancellationToken)
        {
           // TODO: Implement Update{itemname}CommandHandler method 
           var item =await _context.{nameofPlural}.FindAsync( new object[] { request.Id }, cancellationToken);
           if (item != null)
           {
                var dto = _mapper.Map<{itemname}Dto>(request);
                item = _mapper.Map(dto, item);
				// raise a update domain event
				item.AddDomainEvent(new UpdatedEvent<{itemname}>(item));
                await _context.SaveChangesAsync(cancellationToken);
           }
           return await Result.SuccessAsync();
        }
    }

