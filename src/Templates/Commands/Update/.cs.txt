using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using {rootnamespace}.Application.Common.Interfaces;
using {rootnamespace}.Application.Common.Mappings;
using {rootnamespace}.Application.Common.Models;
using {selectns}.{nameofPlural}.DTOs;
using {rootnamespace}.Domain.Entities;
using {rootnamespace}.Domain.Events;
using MediatR;
using Microsoft.Extensions.Localization;

namespace {namespace}
{
    public class Update{itemname}Command: {itemname}Dto,IRequest<Result>, IMapFrom<{itemname}>
    {
        public void Mapping(Profile profile)
        {
            profile.CreateMap<{itemname}, Update{itemname}Command>().ReverseMap();
        }
    }

    public class Update{itemname}CommandHandler : IRequestHandler<Update{itemname}Command, Result>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<Update{itemname}CommandHandler> _localizer;
        public Update{itemname}CommandHandler(
            IApplicationDbContext context,
            IStringLocalizer<Update{itemname}CommandHandler> localizer,
             IMapper mapper
            )
        {
            _context = context;
            _localizer = localizer;
            _mapper = mapper;
        }
        public async Task<Result> Handle(Update{itemname}Command request, CancellationToken cancellationToken)
        {
           //TODO:Implementing Update{itemname}CommandHandler method 
           var item =await _context.{nameofPlural}.FindAsync( new object[] { request.Id }, cancellationToken);
           if (item != null)
           {
                item = _mapper.Map(request, item);
                await _context.SaveChangesAsync(cancellationToken);
           }
           return Result.Success();
        }
    }
}
