// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using System.ComponentModel;
using {selectns}.{nameofPlural}.DTOs;
using {selectns}.{nameofPlural}.Caching;

namespace {namespace};

    public class Create{itemname}Command: IMapFrom<{itemname}Dto>,ICacheInvalidatorRequest<Result<int>>
    {
      {dtoFieldDefinition}
      public string CacheKey => {itemname}CacheKey.GetAllCacheKey;
      public CancellationTokenSource? SharedExpiryTokenSource => {itemname}CacheKey.SharedExpiryTokenSource();
    }
    
    public class Create{itemname}CommandHandler : IRequestHandler<Create{itemname}Command, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<Create{itemname}Command> _localizer;
        public Create{itemname}CommandHandler(
            IApplicationDbContext context,
            IStringLocalizer<Create{itemname}Command> localizer,
            IMapper mapper
            )
        {
            _context = context;
            _localizer = localizer;
            _mapper = mapper;
        }
        public async Task<Result<int>> Handle(Create{itemname}Command request, CancellationToken cancellationToken)
        {
           // TODO: Implement Create{itemname}CommandHandler method 
           var dto = _mapper.Map<{itemname}Dto>(request);
           var item = _mapper.Map<{itemname}>(dto);
           // raise a create domain event
	       item.AddDomainEvent(new {itemname}CreatedEvent(item));
           _context.{nameofPlural}.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

