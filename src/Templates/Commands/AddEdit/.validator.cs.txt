// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

namespace {namespace};

public class AddEdit{itemname}CommandValidator : AbstractValidator<AddEdit{itemname}Command>
{
    public AddEdit{itemname}CommandValidator()
    {
           // TODO: Implement AddEdit{itemname}CommandValidator method, for example: 
           // RuleFor(v => v.Name)
           //      .MaximumLength(256)
           //      .NotEmpty();
           throw new System.NotImplementedException();
     }
     public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
     {
        var result = await ValidateAsync(ValidationContext<AddEdit{itemname}Command>.CreateWithOptions((AddEdit{itemname}Command)model, x => x.IncludeProperties(propertyName)));
        if (result.IsValid)
            return Array.Empty<string>();
        return result.Errors.Select(e => e.ErrorMessage);
     };
}

